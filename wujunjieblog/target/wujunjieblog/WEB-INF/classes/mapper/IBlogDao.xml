<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.seecen.dao.IBlogDao">
  <resultMap id="BaseResultMap" type="com.seecen.model.Blog">
    <id column="blog_id" jdbcType="INTEGER" property="blogId" />
    <result column="blog_type_id" jdbcType="INTEGER" property="blogTypeId" />
    <result column="blog_sign" jdbcType="VARCHAR" property="blogSign" />
    <result column="blog_title" jdbcType="VARCHAR" property="blogTitle" />
    <result column="blog_content" jdbcType="VARCHAR" property="blogContent" />
    <result column="blog_image" jdbcType="VARCHAR" property="blogImage" />
    <result column="blog_author" jdbcType="VARCHAR" property="blogAuthor" />
    <result column="blog_createtime" jdbcType="TIMESTAMP" property="blogCreatetime" />
    <result column="blog_view" jdbcType="INTEGER" property="blogView" />
    <result column="type_content" jdbcType="VARCHAR" property="type.typeContent" />
    <result column="blog_comments" jdbcType="INTEGER" property="blogComments"/>
    <result column="allc" jdbcType="INTEGER" property="count"/>
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from blog
    where blog_id = #{blogId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.seecen.model.Blog">
    insert into blog (blog_id, blog_type_id, blog_sign, 
      blog_title, blog_content, blog_image, 
      blog_author, blog_createtime, blog_view
      )
    values (#{blogId,jdbcType=INTEGER}, #{blogTypeId,jdbcType=INTEGER}, #{blogSign,jdbcType=VARCHAR}, 
      #{blogTitle,jdbcType=VARCHAR}, #{blogContent,jdbcType=VARCHAR}, #{blogImage,jdbcType=VARCHAR}, 
      #{blogAuthor,jdbcType=VARCHAR}, #{blogCreatetime,jdbcType=TIMESTAMP}, #{blogView,jdbcType=INTEGER}
      )
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.seecen.model.Blog">
    update blog
    set blog_type_id = #{blogTypeId,jdbcType=INTEGER},
      blog_sign = #{blogSign,jdbcType=VARCHAR},
      blog_title = #{blogTitle,jdbcType=VARCHAR},
      blog_content = #{blogContent,jdbcType=VARCHAR},
      blog_image = #{blogImage,jdbcType=VARCHAR},
      blog_author = #{blogAuthor,jdbcType=VARCHAR},
      blog_createtime = #{blogCreatetime,jdbcType=TIMESTAMP},
      blog_view = #{blogView,jdbcType=INTEGER}
    where blog_id = #{blogId,jdbcType=INTEGER}
  </update>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select a.blog_id, a.blog_type_id, a.blog_sign, a.blog_title, a.blog_content, a.blog_image, a.blog_author,
    a.blog_createtime, a.blog_view,a.blog_comments,b.type_content
    from blog a left join type b
    on a.blog_type_id=b.blog_type_id
    where a.blog_id = #{blogId,jdbcType=INTEGER}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select a.blog_id, a.blog_type_id, a.blog_sign, a.blog_title, a.blog_content, a.blog_image, a.blog_author,
    a.blog_createtime, a.blog_view,a.blog_comments,b.type_content
        from blog a left join type b
        on a.blog_type_id=b.blog_type_id
  </select>
  <select id="selectRandom" resultMap="BaseResultMap">
    SELECT a.blog_id, a.blog_type_id, a.blog_sign, a.blog_title, a.blog_content, a.blog_image, a.blog_author,
    a.blog_createtime, a.blog_view,a.blog_comments,b.type_content
     FROM blog a left join type b
      on a.blog_type_id=b.blog_type_id
    ORDER BY rand() DESC LIMIT 3
  </select>
  <select id="selectNewest" resultMap="BaseResultMap">
    SELECT a.blog_id, a.blog_type_id, a.blog_sign, a.blog_title, a.blog_content, a.blog_image, a.blog_author,
    a.blog_createtime, a.blog_view,a.blog_comments,b.type_content
     FROM blog a left join type b
      on a.blog_type_id=b.blog_type_id
    ORDER BY blog_createtime DESC LIMIT 3
  </select>
    <select id="selectLastOneBlog" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select a.blog_id, a.blog_type_id, a.blog_sign, a.blog_title, a.blog_content, a.blog_image, a.blog_author,
    a.blog_createtime, a.blog_view,a.blog_comments,b.type_content
        from blog a left join type b
        on a.blog_type_id=b.blog_type_id
        WHERE
         #{blogid} > a.blog_id ORDER BY blog_id DESC limit 1
    </select>
    <select id="selectNextOneBlog" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select a.blog_id, a.blog_type_id, a.blog_sign, a.blog_title, a.blog_content, a.blog_image, a.blog_author,
    a.blog_createtime, a.blog_view,a.blog_comments,b.type_content
        from blog a left join type b
        on a.blog_type_id=b.blog_type_id
        WHERE
         a.blog_id > #{blogid} ORDER BY blog_id limit 1
    </select>
  <select id="selectBlogByType" resultMap="BaseResultMap">
    select blog1.type_content,count(1) allc from
      (select a.blog_id, a.blog_type_id, a.blog_sign, a.blog_title, a.blog_content, a.blog_image, a.blog_author,
        a.blog_createtime, a.blog_view,a.blog_comments,b.type_content
        from blog a left join type b
        on a.blog_type_id=b.blog_type_id) blog1
        GROUP BY blog1.type_content
  </select>
  <select id="selectAllByBlogType" parameterType="java.lang.String" resultMap="BaseResultMap">
     select a.blog_id, a.blog_type_id, a.blog_sign, a.blog_title, a.blog_content, a.blog_image, a.blog_author,
    a.blog_createtime, a.blog_view,a.blog_comments,b.type_content
        from blog a left join type b
        on a.blog_type_id=b.blog_type_id
        where b.type_content = #{type_content}
  </select>
  <update id="updateBlogCommentsByBlogId" parameterType="com.seecen.model.Blog">
   update blog set blog_comments=blog_comments+1 where blog_id=#{blog_id}
  </update>
  <update id="updateBlogViewByBlogId" parameterType="com.seecen.model.Blog">
   update blog set blog_view=blog_view+1 where blog_id=#{blog_id}
  </update>
  <select id="selectAllBlogSign" resultMap="BaseResultMap">
    select blog_sign from blog limit 6
  </select>
  <select id="selectAllByBlogSign" parameterType="java.lang.String" resultMap="BaseResultMap">
      select a.blog_id, a.blog_type_id, a.blog_sign, a.blog_title, a.blog_content, a.blog_image, a.blog_author,
    a.blog_createtime, a.blog_view,a.blog_comments,b.type_content
        from blog a left join type b
        on a.blog_type_id=b.blog_type_id
        where a.blog_sign = #{blog_sign}
  </select>
    <select id="selectLikeByTitle" parameterType="java.lang.String" resultMap="BaseResultMap">
        select a.blog_id, a.blog_type_id, a.blog_sign, a.blog_title, a.blog_content, a.blog_image, a.blog_author,
    a.blog_createtime, a.blog_view,a.blog_comments,b.type_content
        from blog a left join type b
        on a.blog_type_id=b.blog_type_id
        where a.blog_title  like concat('%',#{tips},'%')
        or a.blog_sign like concat('%',#{tips},'%')
        or b.type_content like concat('%',#{tips},'%');
    </select>
</mapper>